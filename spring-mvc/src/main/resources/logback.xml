<?xml version="1.0" encoding="UTF-8" ?>
<!--
根节点<configuration>包含三个属性：
scan：默认为true。作用：当设置为true时，如果配置文件发生改变，将会被重新加载。
scanPeriod：默认时间间隔为1分钟，默认单位是毫秒，当scan为true时，此属性生效。作用：检测配置文件是否有修改时间间隔。
debug：默认为false。作用：当此属性为true时，将打印出logback内部日志信息，实时查看logback运行状态。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 用来定义变量值，有两个属性name和value，定义的值被插入到logger上下文中，可以使"${}"来使用变量。-->
    <property name="LOG_HOME" value="logs"/>
    <property name="OUT_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{64} - %msg%n"/>

    <!-- 用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default，用于区分不同的应用程序的记录，一旦设置，不能修改。-->
    <contextName>myAppName</contextName>

    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--
            格式化输出：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度，
            %logger{64}：表示logger名字最长64个字符，否则按照句点分割，%msg：日志消息，%n：换行符
            -->
            <Pattern>${OUT_PATTERN}</Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 文件输出 -->
    <appender name="FILE_TIME" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <file>${LOG_HOME}/spring-time.log</file>
        <!-- 默认为true。如果是true，日志被追加到文件结尾，如果是false，清空现存文件。-->
        <append>true</append>
        <!-- 默认为false。如果是true，日志会被安全的写入文件，即其他的FileAppender也在向此文件做写入操作，效率低。-->
        <prudent>false</prudent>
        <!-- 按时间轮转分割 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/spring-time.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 保留最大历史归档文件（按天分割则表示保留多少天内的文件，按小时分割则表示保留多少天内的文件） -->
            <maxHistory>30</maxHistory>
            <!-- 控制所有归档日志文件的总大小 -->
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
        <!-- encoder 默认使用 ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${OUT_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 根据级别过滤日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 文件输出 -->
    <appender name="FILE_SIZE_TIME" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <file>${LOG_HOME}/spring-size-time.log</file>
        <!-- 默认为true。如果是true，日志被追加到文件结尾，如果是false，清空现存文件。-->
        <append>true</append>
        <!-- 默认为false。如果是true，日志会被安全的写入文件，即其他的FileAppender也在向此文件做写入操作，效率低。-->
        <prudent>false</prudent>
        <!-- 按时间轮转分割 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/spring-size-time.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <!-- 触发文件归档的最大文件尺寸 -->
            <maxFileSize>100MB</maxFileSize>
            <!-- 保留最大历史归档文件（按天分割则表示保留多少天内的文件，按小时分割则表示保留多少天内的文件） -->
            <maxHistory>30</maxHistory>
            <!-- 控制所有归档日志文件的总大小 -->
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
        <!-- encoder 默认使用 ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${OUT_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- com.lee包下的日志都输出到单独一个文件 -->
    <logger name="com.lee">
        <appender-ref ref="FILE_SIZE_TIME"/>
    </logger>

    <!-- 默认日志进程 -->
    <root level="TRACE">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE_TIME"/>
    </root>
</configuration>