############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
##RootLogger使用的处理器（获取时设置）：顶级父元素
handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
#RootLogger日志等级
.level= ALL

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

###自定义Logger
#com.lee.log.jul.MyLogger.handlers=java.util.logging.FileHandler
##自定义Logger日志等级
#com.lee.log.jul.MyLogger.level=INFO
##忽略父日志设置
#com.lee.log.jul.MyLogger.useParentHandlers=false

# default file output is in user's home directory.
##文件处理器
#输出日志级别
java.util.logging.FileHandler.level=INFO
#输出日志格式
#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
#输出日志文件路径
java.util.logging.FileHandler.pattern=D:\\logs\\java%u.log
#输出日志文件限制大小（50000字节）
java.util.logging.FileHandler.limit=500
#输出日志文件限制个数
java.util.logging.FileHandler.count=3
#输出日志文件 是否是追加（不会覆盖前边的日志）
java.util.logging.FileHandler.append=true

# Limit the message that are printed on the console to INFO and above.
##控制台处理器
#输出日志级别
java.util.logging.ConsoleHandler.level=ALL
#指定handler对象的字符集
java.util.logging.ConsoleHandler.encoding=UTF-8
#输出日志格式
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

# Example to customize the SimpleFormatter output format 
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n
# 指定日志消息格式
java.util.logging.SimpleFormatter.format = ===%4$s: %5$s [%1$tc]%n

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
com.xyz.foo.level = SEVERE
