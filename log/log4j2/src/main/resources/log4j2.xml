<?xml version="1.0" encoding="UTF-8"?>
<configuration status="debug" name="log4j2Test" monitorinterval="5">

    <!-- ================================ 自定义输出格式说明 ================================
    -X: X信息输出时左对齐；
    %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,
    %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
    %r: 输出自应用启动到输出该log信息耗费的毫秒数
    %c: 输出日志信息所属的类目，通常就是所在类的全名
    %t: 输出产生该日志事件的线程名
    %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10)
    %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
    %%: 输出一个"%"字符
    %F: 输出日志消息产生时所在的文件名称
    %L: 输出代码中的行号
    %m: 输出代码中指定的消息,产生的日志具体信息
    %n: 输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"输出日志信息换行
    可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
    1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
    2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
    3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
    4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边较远输出的字符截掉。
    -->

    <!-- ================================ log4j2.xml文件的配置结构大致如下 =================================== -->
    <!--
    Configuration
        properties
        Appenders
            Console
                PatternLayout
            File
            RollingRandomAccessFile
            Async
        Loggers
            Logger
            Root
                AppenderRef
    -->

    <properties>
        <property name="PATTERN_LAYOUT">%d %-5p [%t] [%F:%L] : %m%n</property>
        <property name="LOG_FILE_HOME">D:/logs/log4j2</property>
    </properties>

    <appenders>
        <Console name="STDOUT" target="SYSTEM_OUT">
            <PatternLayout pattern="${PATTERN_LAYOUT}"/>
        </Console>

        <File name="File" fileName="${LOG_FILE_HOME}/File.log">
            <PatternLayout pattern="%d %-5p [%t] [%c{l.}] : %m%n"/>
        </File>

        <!-- 异步写入 -->
        <Async name="Async">
            <AppenderRef ref="File"/>
        </Async>

        <RollingRandomAccessFile
                name="RollingRandomAccessFile"
                fileName="${LOG_FILE_HOME}/RollingRandomAccessFile.log"
                filePattern="${LOG_FILE_HOME}/$${date:yyyy-MM}/RollingRandomAccessFile_%d{yyyy-MM-dd-HH-mm}.log.gz">
            <PatternLayout pattern="${PATTERN_LAYOUT}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <DefaultRolloverStrategy>
                <!-- 设置删除规则 -->
                <Delete basePath="${LOG_FILE_HOME}" maxDepth="2">
                    <IfFileName glob="*/RollingRandomAccessFile_*.log.gz"/>
                    <!-- 删除多久前的文件：天d,时h,分m -->
                    <IfLastModified age="2m"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingRandomAccessFile>
    </appenders>

    <loggers>
        <root level="trace">
            <appender-ref ref="STDOUT"/>
            <!--            <appender-ref ref="Async"/>-->
            <appender-ref ref="RollingRandomAccessFile"/>
        </root>
    </loggers>
</configuration>